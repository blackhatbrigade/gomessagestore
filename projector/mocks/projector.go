// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blackhatbrigade/gomessagestore/projector (interfaces: Projector)

// Package mock_projector is a generated GoMock package.
package mock_projector

import (
	context "context"
	projector "github.com/blackhatbrigade/gomessagestore/projector"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProjector is a mock of Projector interface
type MockProjector struct {
	ctrl     *gomock.Controller
	recorder *MockProjectorMockRecorder
}

// MockProjectorMockRecorder is the mock recorder for MockProjector
type MockProjectorMockRecorder struct {
	mock *MockProjector
}

// NewMockProjector creates a new mock instance
func NewMockProjector(ctrl *gomock.Controller) *MockProjector {
	mock := &MockProjector{ctrl: ctrl}
	mock.recorder = &MockProjectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProjector) EXPECT() *MockProjectorMockRecorder {
	return m.recorder
}

// RegisterReducer mocks base method
func (m *MockProjector) RegisterReducer(arg0 projector.MessageReducer, arg1 ...projector.ReducerOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterReducer", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterReducer indicates an expected call of RegisterReducer
func (mr *MockProjectorMockRecorder) RegisterReducer(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterReducer", reflect.TypeOf((*MockProjector)(nil).RegisterReducer), varargs...)
}

// Run mocks base method
func (m *MockProjector) Run(arg0 context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockProjectorMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockProjector)(nil).Run), arg0)
}
