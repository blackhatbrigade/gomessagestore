// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blackhatbrigade/gomessagestore (interfaces: Message)

// Package mock_gomessagestore is a generated GoMock package.
package mock_gomessagestore

import (
	repository "github.com/blackhatbrigade/gomessagestore/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMessage is a mock of Message interface
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// Position mocks base method
func (m *MockMessage) Position() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Position")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Position indicates an expected call of Position
func (mr *MockMessageMockRecorder) Position() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Position", reflect.TypeOf((*MockMessage)(nil).Position))
}

// ToEnvelope mocks base method
func (m *MockMessage) ToEnvelope() (*repository.MessageEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToEnvelope")
	ret0, _ := ret[0].(*repository.MessageEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToEnvelope indicates an expected call of ToEnvelope
func (mr *MockMessageMockRecorder) ToEnvelope() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToEnvelope", reflect.TypeOf((*MockMessage)(nil).ToEnvelope))
}

// Type mocks base method
func (m *MockMessage) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockMessageMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockMessage)(nil).Type))
}

// Version mocks base method
func (m *MockMessage) Version() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockMessageMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockMessage)(nil).Version))
}
