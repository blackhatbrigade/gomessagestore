// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blackhatbrigade/gomessagestore (interfaces: Projector)

// Package mock_gomessagestore is a generated GoMock package.
package mock_gomessagestore

import (
	context "context"
	uuid "github.com/blackhatbrigade/gomessagestore/uuid"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProjector is a mock of Projector interface
type MockProjector struct {
	ctrl     *gomock.Controller
	recorder *MockProjectorMockRecorder
}

// MockProjectorMockRecorder is the mock recorder for MockProjector
type MockProjectorMockRecorder struct {
	mock *MockProjector
}

// NewMockProjector creates a new mock instance
func NewMockProjector(ctrl *gomock.Controller) *MockProjector {
	mock := &MockProjector{ctrl: ctrl}
	mock.recorder = &MockProjectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProjector) EXPECT() *MockProjectorMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockProjector) Run(arg0 context.Context, arg1 string, arg2 uuid.UUID) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockProjectorMockRecorder) Run(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockProjector)(nil).Run), arg0, arg1, arg2)
}
