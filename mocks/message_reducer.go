// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blackhatbrigade/gomessagestore (interfaces: MessageReducer)

// Package mock_gomessagestore is a generated GoMock package.
package mock_gomessagestore

import (
	gomessagestore "github.com/blackhatbrigade/gomessagestore"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMessageReducer is a mock of MessageReducer interface
type MockMessageReducer struct {
	ctrl     *gomock.Controller
	recorder *MockMessageReducerMockRecorder
}

// MockMessageReducerMockRecorder is the mock recorder for MockMessageReducer
type MockMessageReducerMockRecorder struct {
	mock *MockMessageReducer
}

// NewMockMessageReducer creates a new mock instance
func NewMockMessageReducer(ctrl *gomock.Controller) *MockMessageReducer {
	mock := &MockMessageReducer{ctrl: ctrl}
	mock.recorder = &MockMessageReducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessageReducer) EXPECT() *MockMessageReducerMockRecorder {
	return m.recorder
}

// Reduce mocks base method
func (m *MockMessageReducer) Reduce(arg0 gomessagestore.Message, arg1 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reduce", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reduce indicates an expected call of Reduce
func (mr *MockMessageReducerMockRecorder) Reduce(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reduce", reflect.TypeOf((*MockMessageReducer)(nil).Reduce), arg0, arg1)
}

// Type mocks base method
func (m *MockMessageReducer) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockMessageReducerMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockMessageReducer)(nil).Type))
}
