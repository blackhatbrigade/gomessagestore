// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blackhatbrigade/gomessagestore (interfaces: Repository)

// Package mock_gomessagestore is a generated GoMock package.
package mock_gomessagestore

import (
	context "context"
	gomessagestore "github.com/blackhatbrigade/gomessagestore"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindAllMessagesInStream mocks base method
func (m *MockRepository) FindAllMessagesInStream(arg0 context.Context, arg1 string) ([]*gomessagestore.MessageEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMessagesInStream", arg0, arg1)
	ret0, _ := ret[0].([]*gomessagestore.MessageEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllMessagesInStream indicates an expected call of FindAllMessagesInStream
func (mr *MockRepositoryMockRecorder) FindAllMessagesInStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMessagesInStream", reflect.TypeOf((*MockRepository)(nil).FindAllMessagesInStream), arg0, arg1)
}

// FindAllMessagesSince mocks base method
func (m *MockRepository) FindAllMessagesSince(arg0 context.Context, arg1 int64) ([]*gomessagestore.MessageEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMessagesSince", arg0, arg1)
	ret0, _ := ret[0].([]*gomessagestore.MessageEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllMessagesSince indicates an expected call of FindAllMessagesSince
func (mr *MockRepositoryMockRecorder) FindAllMessagesSince(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMessagesSince", reflect.TypeOf((*MockRepository)(nil).FindAllMessagesSince), arg0, arg1)
}

// FindLastMessageInStream mocks base method
func (m *MockRepository) FindLastMessageInStream(arg0 context.Context, arg1 string) (*gomessagestore.MessageEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastMessageInStream", arg0, arg1)
	ret0, _ := ret[0].(*gomessagestore.MessageEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastMessageInStream indicates an expected call of FindLastMessageInStream
func (mr *MockRepositoryMockRecorder) FindLastMessageInStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastMessageInStream", reflect.TypeOf((*MockRepository)(nil).FindLastMessageInStream), arg0, arg1)
}

// FindSubscriberPosition mocks base method
func (m *MockRepository) FindSubscriberPosition(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubscriberPosition", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubscriberPosition indicates an expected call of FindSubscriberPosition
func (mr *MockRepositoryMockRecorder) FindSubscriberPosition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubscriberPosition", reflect.TypeOf((*MockRepository)(nil).FindSubscriberPosition), arg0, arg1)
}

// SetSubscriberPosition mocks base method
func (m *MockRepository) SetSubscriberPosition(arg0 context.Context, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSubscriberPosition", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSubscriberPosition indicates an expected call of SetSubscriberPosition
func (mr *MockRepositoryMockRecorder) SetSubscriberPosition(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubscriberPosition", reflect.TypeOf((*MockRepository)(nil).SetSubscriberPosition), arg0, arg1, arg2)
}

// WriteMessage mocks base method
func (m *MockRepository) WriteMessage(arg0 context.Context, arg1 *gomessagestore.MessageEnvelope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage
func (mr *MockRepositoryMockRecorder) WriteMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockRepository)(nil).WriteMessage), arg0, arg1)
}

// WriteMessageWithExpectedPosition mocks base method
func (m *MockRepository) WriteMessageWithExpectedPosition(arg0 context.Context, arg1 *gomessagestore.MessageEnvelope, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessageWithExpectedPosition", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessageWithExpectedPosition indicates an expected call of WriteMessageWithExpectedPosition
func (mr *MockRepositoryMockRecorder) WriteMessageWithExpectedPosition(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessageWithExpectedPosition", reflect.TypeOf((*MockRepository)(nil).WriteMessageWithExpectedPosition), arg0, arg1, arg2)
}
