// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blackhatbrigade/gomessagestore (interfaces: SubscriptionWorker)

// Package mock_gomessagestore is a generated GoMock package.
package mock_gomessagestore

import (
	context "context"
	gomessagestore "github.com/blackhatbrigade/gomessagestore"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSubscriptionWorker is a mock of SubscriptionWorker interface
type MockSubscriptionWorker struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionWorkerMockRecorder
}

// MockSubscriptionWorkerMockRecorder is the mock recorder for MockSubscriptionWorker
type MockSubscriptionWorkerMockRecorder struct {
	mock *MockSubscriptionWorker
}

// NewMockSubscriptionWorker creates a new mock instance
func NewMockSubscriptionWorker(ctrl *gomock.Controller) *MockSubscriptionWorker {
	mock := &MockSubscriptionWorker{ctrl: ctrl}
	mock.recorder = &MockSubscriptionWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubscriptionWorker) EXPECT() *MockSubscriptionWorkerMockRecorder {
	return m.recorder
}

// GetMessages mocks base method
func (m *MockSubscriptionWorker) GetMessages(arg0 context.Context, arg1 int64) ([]gomessagestore.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", arg0, arg1)
	ret0, _ := ret[0].([]gomessagestore.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages
func (mr *MockSubscriptionWorkerMockRecorder) GetMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockSubscriptionWorker)(nil).GetMessages), arg0, arg1)
}

// GetPosition mocks base method
func (m *MockSubscriptionWorker) GetPosition(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosition", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosition indicates an expected call of GetPosition
func (mr *MockSubscriptionWorkerMockRecorder) GetPosition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosition", reflect.TypeOf((*MockSubscriptionWorker)(nil).GetPosition), arg0)
}

// ProcessMessages mocks base method
func (m *MockSubscriptionWorker) ProcessMessages(arg0 context.Context, arg1 []gomessagestore.Message) (int, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessages", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProcessMessages indicates an expected call of ProcessMessages
func (mr *MockSubscriptionWorkerMockRecorder) ProcessMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessages", reflect.TypeOf((*MockSubscriptionWorker)(nil).ProcessMessages), arg0, arg1)
}

// SetPosition mocks base method
func (m *MockSubscriptionWorker) SetPosition(arg0 context.Context, arg1 gomessagestore.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPosition", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPosition indicates an expected call of SetPosition
func (mr *MockSubscriptionWorkerMockRecorder) SetPosition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPosition", reflect.TypeOf((*MockSubscriptionWorker)(nil).SetPosition), arg0, arg1)
}
